# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: play-memory-backend CICD

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

# 테스트 결과 작성을 위한 쓰기권한
permissions: write-all

env:
  NEST_ENV: .env.dev
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}

jobs:
  build_dev:
    runs-on: ubuntu-22.04 # OS 실행환경 지정
    
    # dev 브랜치에 push, pull request가 발생할 경우
    # dev 환경에 맞는 환경변수 설정
    environment: 
      name: dev

    permissions: # 권한 추가
      packages: write

    strategy:
      matrix:
        node-version: [20.9.0] # node-version이 20.9.0인 경우 테스트 실행. 배열로 설정한 경우 모든 버전에 대해 테스트 실행
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4 # repo 소스 코드 받아옴
    
    # node set up
    - name: Set up Node ${{ matrix.node-version }}
      uses: actions/setup-node@v4 # node.js 플러그인 설치
      
      with:
        node-version: ${{ matrix.node-version }} # 상단에서 지정한 node-version 설치 명시
        cache: 'npm' # 패키지 지원자 설정
    
    # node package cache set up
    - name: Cache node modules
      id: cache
      uses: actions/cache@v4 # 캐시 플러그인 설치
      env:
        cache-name: cache-node-modules # 캐시 이름 설정
      with:
        # package-lock.json 파일이 변경되었을 때만 ~/.npm을 캐싱
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # node module install
    - name: node module install
      # package-lock.json 파일이 변경되었을 때만 npm ci 실행
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci # package-lock.json에 명시된 패키지 설치  

    # nest build
    - name: Play Memory Dev Build
      run: npm run build:dev --if-present # npm run build:dev 명령어로 빌드. npm 스크립트에 해당하는 명령어가 없으면 실행하지 않음

    # nest test
    - name: Run tests
      run: npm test # npm test 명령어로 jest 테스트 실행
    
    # test failure notification
    - name: Test Failure Notification
      if: ${{ failure() }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '[CI FAILED] 빌드 혹은 테스트 실패',
            body: '빌드 혹은 테스트 실패로 인해 배포 자동화를 할 수 없습니다.'
          })

    # 대문자로 인한 오류 방지를 위해 github REPO_OWNER 값을 소문자로 변환
    - name: Convert repository owner to lowercase
      id: repo_owner
      run: echo "::set-output name=lowercase::$(echo ${{ env.REPO_OWNER }} | awk '{print tolower($0)}')"

    # Create .env.dev file
    - name: Create .env file
      env:
        MONGODB_URI: mongodb+srv://${{secrets.DATABASE_ID}}:${{secrets.DATABASE_PW}}@${{ secrets.EC2_HOST }}/?retryWrites=true&w=majority
      run: |
        echo "NODE_ENV=dev" >> ${{ env.NEST_ENV }}
        echo "PORT=${{ secrets.PORT }}" >> ${{ env.NEST_ENV }}
        echo "DATABASE_ID=${{ secrets.DATABASE_ID }}" >> ${{ env.NEST_ENV }}
        echo "DATABASE_PW=${{ secrets.DATABASE_PW }}" >> ${{ env.NEST_ENV }}
        echo "MONGODB_URI=$MONGODB_URI" >> ${{ env.NEST_ENV }}

    # Login to Docker Hub
    - name: Login to GHCR
      uses: docker/login-action@v3.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/nest-gateway-dev
        tags: |
          type=raw,value=latest

    # Build and push Docker image - dev - gateway
    - name: Build and push Docker image - dev - gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/gateway/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
          

    # Copy docker-compose.dev.yml to EC2
    - name: Copy docker-compose.dev.yml to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        port: ${{ secrets.EC2_PORT }}
        source: "./docker-compose.dev.yml"
        target: "/home/${{ secrets.EC2_USERNAME }}/docker-compose"

    # Deploy to EC2(Dev Server)
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          cd /home/${{ secrets.EC2_USERNAME }}/docker-compose
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ steps.repo_owner.outputs.lowercase }} --password-stdin
          docker pull ghcr.io/${{ steps.repo_owner.outputs.lowercase }}/nest-gateway-dev:latest
          docker compose -f docker-compose.dev.yml up -d --build
          docker logout ghcr.io